---
interface Props {
  render: Render;
}
import type { Render } from "@lib/api";
const { active, tags } = Astro.props.render;

import MenuCard from "@layouts/MenuCard.astro";
import "@layouts/compositions/stack.css";
import "@layouts/utilities/center.css";

const key = "open";
const xData = JSON.stringify({ [key]: false });

const [tag] = tags.filter((x) => active === x.tag);
const avatar = tag?.avatar;
const lastSeen = tag?.date;
---

<style>
  .this {
    /* compositions/stack.css */
    --stack--spacing: auto;
    /* TODO utilities/center.css */
    --center--measure: 200ch;

    position: sticky;
    top: var(--top-placement);
  }
  .this::before {
    content: "";
    background-repeat: no-repeat;
    background-color: inherit;
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' height='25'><defs><pattern id='bg1' patternUnits='userSpaceOnUse' width='40' height='25'><text y='.9em' font-size='20'>ðŸš€</text></pattern></defs><rect width='100%' height='100%' fill='url(%23bg1)' /></svg>");
    position: absolute;
    width: 100%;
    height: calc(var(--top-placement) + var(--rocket-overlap));
    top: calc((var(--top-placement) + var(--rocket-overlap)) * -1);
  }

  header {
    min-height: var(--robot-height);
    display: inline-flex;
    align-items: center;
  }
  img {
    width: var(--robot-height);
    height: var(--robot-height);
  }
  header > :last-child {
    margin-left: auto;
  }
</style>

<div x-data={xData} class="this | stack || bg-primary">
  <header class="center">
    {
      avatar && (
        <MenuCard>
          <img slot="avatar" src={avatar} />
          <div>{active}</div>
          <div>last seen {lastSeen}</div>
        </MenuCard>
      )
    }
    <div x-cloak>
      <button
        x-on:click={`${key} = ! ${key}`}
        x-bind:class={`${key} ? 'i-lucide-arrow-up-circle' : 'i-lucide-search'`}
      ></button>
      <button
        x-on:click={`colorScheme = colorScheme === 'dark' ? 'light' : 'dark'`}
        class="i-lucide-sun dark:i-lucide-moon"></button>
    </div>
  </header>
  <div class="stack" x-show={key} x-transition>
    <input
      slot="subhead"
      type="text"
      placeholder="Search content"
      x-model="search"
      x-cloak
    />
  </div>
</div>
