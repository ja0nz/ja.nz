---
interface Props {
  render: Render;
}
import type { Render } from "@lib/api";
const { active, tags } = Astro.props.render;

import MenuCard from "@layouts/MenuCard.astro";
import "@layouts/compositions/stack.css";
import "@layouts/compositions/repel.css";
import "@layouts/utilities/center.css";

const key = "open";
const xData = JSON.stringify({ [key]: false });

const [tag] = tags.filter((x) => active === x.tag);
const avatar = tag?.avatar;
---

<style>
  .this {
    /* Sync with FrontSide! */
    --stack--spacing: var(--step-0);

    position: sticky;
    top: var(--top-placement);
    z-index: 1;
    @apply bg-light dark:bg-dark;
  }
  .this::before {
    content: "";
    background-color: inherit;
    background-repeat: no-repeat;
    background-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' height='25'><defs><pattern id='bg1' patternUnits='userSpaceOnUse' width='40' height='25'><text y='.9em' font-size='20'>🚀</text></pattern></defs><rect width='100%' height='100%' fill='url(%23bg1)' /></svg>");
    position: absolute;
    width: 100%;
    height: calc(var(--top-placement) + var(--rocket-overlap));
    top: calc((var(--top-placement) + var(--rocket-overlap)) * -1);
  }
  .placeholder {
    /* Gap the top placing */
    height: var(--top-placement);
    text-align: center;
    margin-block-start: 0;
  }

  header {
    min-height: var(--robot-height);
    @apply bg-lightaccent dark:bg-darkaccent;
  }
  img {
    width: var(--robot-height);
    height: var(--robot-height);
  }
</style>

<div x-data={xData} class="this | stack">
  <header class="repel">
    {
      avatar ? (
        <MenuCard>
          <img alt="generated robot head" slot="avatar" src={avatar} />
          <div class="font-head">{active}</div>
          <a href="https://c.xkcd.com/random/comic/">goto&nbsp;XKCD</a>
        </MenuCard>
      ) : (
        <div />
      )
    }
    <div class="m-2-" x-cloak>
      <button
        x-on:click={`${key} = ! ${key}`}
        x-bind:class={`${key} ? 'i-lucide-arrow-up-circle' : 'i-lucide-search'`}
      ></button>
      <button
        x-on:click={`colorScheme = colorScheme === 'dark' ? 'light' : 'dark'`}
        class="i-lucide-sun dark:i-lucide-moon"></button>
    </div>
  </header>
  <div
    style="margin-block-end: 0.5rem;"
    class="dot-shadow"
    x-cloak
    x-show={key}
  >
    <input
      class="w-full px-2- py-4-"
      slot="subhead"
      type="text"
      placeholder="Search content"
      x-model="search"
    />
  </div>
</div>

<script>
  const above50 = "⏬ Pull me down to 🌍 ⏬";
  const below50 = "⏫ Beam me to the ✨ ⏫";

  const callbackFn = (entries: IntersectionObserverEntry[]) => {
    const [{ target, isIntersecting }] = entries;
    target.innerHTML = isIntersecting ? above50 : below50;
  };
  const init = {
    observer: new IntersectionObserver(callbackFn, {
      rootMargin: "0px 0px -50% 0px",
    }),
  };

  document.addEventListener("alpine:init", () => {
    Alpine.data("Placeholder", () => init);
  });
</script>
<div
  x-data="Placeholder"
  x-init="observer.observe($el)"
  class="placeholder | font-head | py-2-"
>
</div>
