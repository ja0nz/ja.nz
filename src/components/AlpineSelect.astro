---
interface Props<T> {
  render: Render;
  fuzzy?: boolean;
  key: Fn<T, string>;
  style: string[];
}

import type { Render } from "@lib/api";
import type { Fn } from "@thi.ng/api";
const { render, key, style, fuzzy = false } = Astro.props;

const regExp = fuzzy ? "$data.regExpF" : "$data.regExp";
const filter = fuzzy ? "$data.filterF" : "$data.filter";

const xData = `{
  search: "",
  data: ${JSON.stringify(render.data)},
  style: ${JSON.stringify(style)},
  key: ${key.toString()}
}`;
const xMethods = `{
  hl: $data.createHighlight(${regExp},$data.style),
  f: ${filter}($data.data, $data.key)
}`;
---

<script>
  import * as init from "@lib/filter";
  document.addEventListener("alpine:init", () => {
    Alpine.data("AlpineSelect", () => ({ ...init }));
  });
</script>

<style>
  div {
    display: contents;
  }
</style>

<div x-data="AlpineSelect">
  <div x-data={xData}>
    <div x-data={xMethods}>
      <slot />
    </div>
  </div>
</div>
