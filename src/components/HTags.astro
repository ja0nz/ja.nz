---
import type { TTS } from "@lib/api";

interface Props {
  render: TTS[];
  style: string[];
}
const { render, style } = Astro.props;

/* Just a random AlpineJS id */
const alpineID = [...Array(10)]
  .map((_) => String.fromCharCode(97 + Math.floor(Math.random() * 26)))
  .join("");
---

<script define:vars={{ alpineID, render, style }}>
  function filter(search, target, fn) {
    return target.filter((x) => fn(x).includes(search.toLowerCase()));
  }
  function highlightSearch(search, el, css) {
    if (search === "") return el;
    return el.replaceAll(
      new RegExp(`(${search.toLowerCase()})`, "ig"),
      `<strong class="${css.join(" ")}">$1</strong>`
    );
  }

  // Alpine Init
  const init = (tags, css) => () => {
    const fFn = ({ tag: t }) => t;
    return {
      search: "",
      f: (search) => filter(search, tags, fFn),
      hl: (search, el) => highlightSearch(search, el, css),
    };
  };

  window[alpineID] = init(render, style);
</script>

<div x-data={alpineID}>
  <input type="text" placeholder="Search tags" x-model="search" />
  <ul>
    <template x-for="tts in f(search)">
      <li>
        <span x-html="hl(search, tts.tag)"></span>
        <span x-text="tts.timestamp"></span>
      </li>
    </template>
  </ul>
</div>
