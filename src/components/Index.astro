---
interface Props {
  tag?: string;
}
import type { FM_D, FrontMatter, Tags, Render } from "@lib/api";

// use to highlight current active
const active = Astro.params?.tag || "";

/* Layouts */
import Layout from "@layouts/Layout.astro";
import Sidebar from "@layouts/Sidebar.astro";
import FrontSide from "@layouts/FrontSide.astro";
import Main from "@layouts/Main.astro";
import SkipLink from "@layouts/SkipLink.astro";
import About from "@layouts/About.astro";
import MainArea from "@layouts/MainArea.astro";

import "@layouts/compositions/sidebar.css";
import "@layouts/utilities/center.css";

/* Components */
import AlpineSelect from "@components/AlpineSelect.astro";
import FlipSide from "@components/FlipSide.astro";
import ContentHeader from "@components/ContentHeader.astro";
import MenuHeader from "@components/MenuHeader.astro";

/* Lib */
import { createTags, createFM } from "@lib/xform";

/* Input */
const posts = await Astro.glob<FrontMatter>("../pages/read/**/*.md");

/* Construct render */
const render: Render = {
  active,
  tags: createTags(posts),
  frontmatter: createFM(posts, active),
};

/* Toggle Sidebar */
const tsKey = "tssidebar";
const tsxOn = `${tsKey} = ! ${tsKey}`;
---

<style>
  .this {
    /* utilities/center.css */
    --center--measure: clamp(16rem, 95vw, 91rem);
    /* compositions/sidebar.css */
    --sidebar--gap: var(--step--2);
    --sidebar--bar-width: clamp(18.38rem, calc(16.77rem + 8.05vw), 22.5rem);
    --sidebar--content-min-width: 65%;

    /* MainMenu + ContentHeader*/
    /* Fixed */
    --rocket-overlap: 24px;
    --top-placement: 36px;
    /* Dyn */
    --robot-height: calc(2 * var(--step-4));
  }
</style>

<Layout title="ja|nz's logbook">
  <div class="this | center | with-sidebar">
    <Sidebar>
      <SkipLink />
      <AlpineSelect
        render={render}
        key={({ tags }: Render) => tags}
        filter={({ tag }: Tags) => tag}
        style={["font-semibold", "bg-blue-200"]}
      >
        <FlipSide key={tsKey}>
          <FrontSide slot="front" requires={[AlpineSelect]} render={render}>
            <MenuHeader toggle={tsxOn} />
          </FrontSide>
          <About toggle={tsxOn} slot="back" />
        </FlipSide>
      </AlpineSelect>
    </Sidebar>
    <MainArea>
      <AlpineSelect
        fuzzy={true}
        render={render}
        key={({ frontmatter }: Render) => frontmatter}
        filter={({ title: a, summary: b }: FM_D) => [a, b].join(" ")}
        style={["font-semibold", "bg-blue-200"]}
      >
        <ContentHeader render={render} />
        <Main requires={[AlpineSelect]} render={render} />
      </AlpineSelect>
    </MainArea>
  </div>
</Layout>
