---
interface Props {
  tag?: string;
}
// use to highlight current active
const active = Astro.params?.tag;

/* Layouts */
import Layout from "@layouts/Layout.astro";
import Sidebar from "@layouts/Sidebar.astro";
import FrontSide from "@layouts/FrontSide.astro";
import Content from "@layouts/Content.astro";
import Main from "@layouts/Main.astro";
import SkipLink from "@layouts/SkipLink.astro";
import MenuCard from "@layouts/MenuCard.astro";
import About from "@layouts/About.astro";

import "@layouts/compositions/sidebar.css";
import "@layouts/utilities/center.css";

/* Components */
import AlpineSelect from "@components/AlpineSelect.astro";
import ContentHeader from "@components/ContentHeader.astro";
import FlipSide from "@components/FlipSide.astro";

/* Lib */
import { renderOverview, createMenuCard } from "@lib/xform";

/* Input */
import type { Render, FM_D, FrontMatter, TMenuCard } from "@lib/api";
const posts = await Astro.glob<FrontMatter>("../pages/read/**/*.md");

/* Tag Search */
const tags: TMenuCard[] = await createMenuCard(posts);
const filterTag = ({ tag }: TMenuCard) => tag;
const styleTag = ["font-semibold", "bg-blue-200"];

/* Content Search */
const content: FM_D[] = renderOverview(posts);
const filterContent = ({ title: a, summary: b, category: c }: FM_D) =>
  [a, b, c].join(" ");
const styleContent = ["font-semibold", "bg-blue-200"];
---

<style>
  .this {
    /* utilities/center.css */
    --center--measure: clamp(16rem, 95vw, 91rem);
    /* compositions/sidebar.css */
    --sidebar--gap: var(--step--2);
    --sidebar--bar-width: clamp(18.38rem, calc(16.77rem + 8.05vw), 22.5rem);
    --sidebar--content-min-width: 65%;

    /* MainMenu + ContentHeader*/
    --rocket-overlap: 24px;
    --top-placement: 36px;
  }
</style>

<Layout title="ja|nz's logbook">
  <div class="this | center | with-sidebar">
    <Sidebar>
      <SkipLink />
      <AlpineSelect
        render={{ active, data: tags }}
        key={filterTag}
        style={styleTag}
      >
        <FlipSide>
          <FrontSide
            slot="front"
            requires={[AlpineSelect]}
            render={{ active, data: tags }}
          />
          <About slot="back" />
        </FlipSide>
      </AlpineSelect>
    </Sidebar>
    <div id="not-sidebar">
      <AlpineSelect
        fuzzy={true}
        render={{ active, data: content }}
        key={filterContent}
        style={styleContent}
      >
        <Content>
          <ContentHeader slot="header" render={{ active, data: content }} />
          <Main
            slot="main"
            requires={[AlpineSelect]}
            render={{ active, data: content }}
          />
        </Content>
      </AlpineSelect>
    </div>
  </div>
</Layout>
