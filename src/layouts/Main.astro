---
interface Props {
  render: Render;
}
import type { Render, Glob, CollectionRender } from "@lib/api";
import { zip } from "@thi.ng/transducers";
const { collection } = Astro.props.render;
import "@layouts/blocks/box.css";
import "@layouts/blocks/pill.css";
import "@layouts/utilities/center.css";
import "@layouts/utilities/radius.css";
import "@layouts/compositions/cluster.css";
import "@layouts/compositions/repel.css";

/* Construct render */
const rPromises: CollectionRender[] = await Promise.all(
  collection.map((x) => x.render())
);

// TODO Hack
const xOn = (id: number) => ({
  "x-on:keyup.enter": `navigation.navigate('/read/${id}')`,
});
---

<style>
  /* Ensure some breathing before tabbing in #main */
  :target {
    scroll-margin-top: calc(
      (
        var(--top-placement) + var(--robot-height) +
          var(--stack-spacing, 1.5rem)
      )
    );
  }
  /* Remove main focus */
  #main:focus {
    outline: 0;
  }

  main {
    /* compositions/center.css */
    --center--measure: clamp(16rem, 95vw, 91rem);
    /* blocks/box.css */
    --box--padding: var(--step-0);

    padding-top: 0 !important;
  }

  /* Card */
  li {
    width: 70%;
    border-radius: 10px;
  }
  li:focus-visible {
    outline: 4px dashed var(--color-secondary);
  }

  li:nth-child(odd) {
    --box--background: var(--bg-bubble-odd);
  }

  li:nth-child(even) {
    --box--background: var(--bg-bubble-even);
    margin-left: auto;
  }
</style>

<script>
  import { highlightDOMString } from "@lib/highlightDOM";
  // Highlight Classes for Tailwind
  const style = ["bg-lightgrey", "dark:bg-darkgrey", "radius"];

  // Filter search
  const filterSearch = (search: string, target: string) => {
    const r = new RegExp(search, "i");
    return r.test(target);
  };

  // Highlight search results
  const highlight = (search: string, target: string) => {
    if (search === "") return target;
    const r = new RegExp(`(${search})`, "ig");
    return target.replaceAll(r, `<span class="${style.join(" ")}">$1</span>`);
  };

  // Highlight search results
  const highlightDOM = (search: string, target: string) => {
    if (search === "") return target;
    return highlightDOMString(
      target,
      search,
      (token) => `<span class="${style.join(" ")}">${token}</span>`
    );
  };

  document.addEventListener("alpine:init", () => {
    Alpine.data("Main", () => ({ filterSearch, highlightDOM, highlight }));
  });
</script>

<main x-data="Main" class="this | box">
  <div class="center">
    <ul id="main" class="stack" tabindex="-1">
      {
        [...zip(collection, rPromises)].map(
          ([content, body]: [Glob, CollectionRender]) => (
            <li
              tabindex="0"
              class="box | stack"
              x-show={`filterSearch(search, $el.textContent)`}
              {...xOn(content.data.id)}
            >
              <div class="cluster">
                {content.data.category === "long" ? (
                  <a href={`/read/${content.data.id}`}>
                    <h2 x-html={`highlight(search, '${content.data.title}')`}>
                      {content.data.title}
                    </h2>
                  </a>
                ) : (
                  <h3 x-html={`highlight(search, '${content.data.title}')`}>
                    {content.data.title}
                  </h3>
                )}

                {content.data.tags?.map((x) => (
                  <a class="no-underline" href={`/tag/${x}#main`}>
                    <span class="pill | radius | bg-light dark:bg-dark">
                      {x}
                    </span>
                  </a>
                ))}
              </div>
              <div
                class="stack"
                x-data="{ content: '' }"
                x-init="content = $el.innerHTML"
                x-html={`highlightDOM(search, content)`}
              >
                {content.data.category === "long" ? (
                  content.data.summary
                    ?.split("\n")
                    .filter((x) => !!x)
                    .map((s) => <p>{s}</p>)
                ) : (
                  <body.Content />
                )}
                {content.data.category === "long" && (
                  <a href={`/read/${content.data.id}`}>
                    <b>[ read ðŸ‘¾ ]</b>
                  </a>
                )}
              </div>
              <div class="repel">
                <i class="text-1-">~ {content.body.split(" ").length} words</i>
                <i class="text-1-">
                  {new Date(content.data.date || "").toLocaleDateString()}
                </i>
              </div>
            </li>
          )
        )
      }
    </ul>
  </div>
</main>
