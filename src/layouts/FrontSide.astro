---
interface Props {
  render: Render;
}
import type { Render } from "@lib/api";
const { active, tags } = Astro.props.render;

import MenuCard from "@layouts/MenuCard.astro";
import "@layouts/compositions/stack.css";
import "@layouts/blocks/dotShadow.css";

// TODO Hack
const xOn = {
  "x-on:keyup.slash.document": "document.activeElement !== $el && $el.select()",
};
---

<style>
  .stack {
    /* Fit to Sidebar Parent height setting */
    height: 100%;

    /* Sync with ContentHeader! */
    --stack--spacing: var(--step-0);
  }

  nav {
    /* Related to max-height; Menu scroll bar  */
    overflow-y: auto;
  }
  a:focus-visible {
    outline: none;
  }
  nav::-webkit-scrollbar {
    display: none;
  }
  .items {
    --stack--spacing: var(--step--5);
  }
  img {
    height: var(--robot-height);
    width: var(--robot-height);
    border-radius: 40px;
    background-color: rgba(1, 1, 1, 0.2);
  }
  li:hover,
  li:has(a:focus-visible) {
    border-radius: 0.5rem;
    background-color: var(--color-secondary);
  }
  li.active {
    outline: 1px solid var(--color-primary);
    outline-offset: -1px;
    border-radius: 5px;
  }
</style>

<script>
  // Highlight Classes for Tailwind
  const style = ["font-semibold", "bg-blue-200"];

  // Filter search
  const filterSearch = (search: string, target: string) =>
    target.includes(search);

  // Highlight search results
  const highlight = (search: string, target: string) => {
    if (search === "") return target;
    const r = new RegExp(`(${search})`, "ig");
    return target.replaceAll(r, `<span class="${style.join(" ")}">$1</span>`);
  };

  document.addEventListener("alpine:init", () => {
    Alpine.data("FrontSide", () => ({ search: "", filterSearch, highlight }));
  });
</script>

<div x-data="FrontSide" class="stack">
  <slot />
  <div class="dot-shadow">
    <input
      class="w-full px-2- py-4-"
      slot="header"
      x-model="search"
      disabled
      x-bind:disabled="false"
      type="text"
      placeholder="Hit / to search ðŸ‘‡"
      {...xOn}
    />
  </div>

  <nav>
    <ul class="items | stack" slot="items">
      {
        tags.map((item) => (
          <li
            x-show={`filterSearch(search, '${item.tag}')`}
            x-init={`'${active}' === '${item.tag}' && $el.scrollIntoView(false)`}
            class={active === item.tag ? "active" : ""}
          >
            <a class="no-underline" href={`/tag/${item.tag}#main`}>
              <MenuCard>
                <img slot="avatar" src={item.avatar} />
                <span
                  x-html={`highlight(search, '${item.tag}')`}
                  class="font-head"
                >
                  {item.tag}
                </span>
                <span>
                  last active:{" "}
                  <time datetime={new Date(item.date).toISOString()}>
                    {new Date(item.date).toLocaleDateString()}
                  </time>
                </span>
              </MenuCard>
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>
