:META:
#+title: Ja0nz Blog ðŸ“– https://ja.nz
#+author: Ja0nz
#+email: mail@ja.nz
#+language: en
:END:
:ORGCONFIG:
#+startup: logdone
#+seq_todo: TODO DRAFT DONE
:END:
:OXHUGOCONFIG:
#+hugo_base_dir: src
#+hugo_section: .
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary author>nil
#+property: header-args :eval never-export
:END:
#+FILETAGS: :typescript:zig:nix:structures:diff:css:sicp:

* Intro :noexport:
This file is written in [[https://orgmode.org/][Org Mode]] markup and may look funny in GitHub. But actually, this file alone is the *blogging engine* for https://ja.nz. It features:
- callable source blocks
- clean up and helper functions
- markdown export with [[https://github.com/kaushalmodi/ox-hugo][Ox-Hugo]]

Org mode is really powerful combined with [[https://orgmode.org/manual/Working-with-Source-Code.html][source block]] snippets. I may blog about this one day too.

/Sidenote:/ I am not using [[https://gohugo.io/][Hugo]] for blogging anymore.

* Table of contents :noexport:toc:
- [[#short][Short]]
  - [[#4nonempty-record-using-proxy][4,Nonempty record using proxy]]
  - [[#5array-and-object-type-detection][5,Array and object type detection]]
  - [[#6utility-flatten-nested-types][6,Utility: Flatten nested types]]
- [[#long][Long]]

* Short
:PROPERTIES:
:export_hugo_bundle: short
:export_hugo_custom_front_matter+: :id (org-entry-get (point) "export_file_name" t)
:export_hugo_custom_front_matter+: :category (org-entry-get (point) "export_hugo_bundle" t)
:END:
** DONE 4,Nonempty record using proxy :typescript:structures:
CLOSED: [2022-04-26 Di 12:35]
:PROPERTIES:
:export_file_name: 4
:END:
This structure guarantees to return a string. It's super useful for all kinds of functionality like algebraic type specification where a neutral value is required by design.
#+begin_src typescript
const safeRecord = new Proxy(
  {}, {
    get: (handler: Record<PropertyKey, string>, name: PropertyKey) : string => {
      handler[name] ??= ""; return handler[name];
    }
  }
);
#+end_src

** DONE 5,Array and object type detection :typescript:
CLOSED: [2022-04-26 Di 12:33]
:PROPERTIES:
:export_file_name: 5
:END:
Matching primitive types with =typeof= is simple. Switching on complex types instead can be a pain - looking at you array and object. Here are two helpers that can be deployed in some conditional type switching logic.
#+begin_src typescript
type DetectArray<T> = number extends keyof T ? true : false;
// use in type switching
DetectArray<string[]> // true
DetectArray<{ [k: number]: unknown }> // true

type DetectStringObj<T> = string extends keyof T ? true : false;
DetectStringObj<{ [k: string]: unknown }> // true
DetectStringObj<{ x: string }> // false, because { x: string } is a subtyped object
#+end_src

** DONE 6,Utility: Flatten nested types :typescript:
CLOSED: [2023-02-14 Di 17:26]
:PROPERTIES:
:export_file_name: 6
:END:
This mapped type is a 'noop type' in the sense that ~input type === output type~. Still, but comes in handy with *intersection/composed types* when editing code as it flattens the given input type. As an example,
#+begin_src typescript
type Ugly = {id: string;} & {date: Date;}
// becomes
type Pretty = {id: string; date: Date;}
// with
type Flatten<T> = {
    [K in keyof T]: T[K];
} & {};
#+end_src

* Long
:PROPERTIES:
:export_hugo_bundle: long
:export_hugo_custom_front_matter+: :id (org-entry-get (point) "export_file_name" t)
:export_hugo_custom_front_matter+: :category (org-entry-get (point) "export_hugo_bundle" t)
:END:

* Workbench :noexport:
#+CALL: short()
#+CALL: long()
** TODO 7,Proxies in fantasyland :typescript:
:PROPERTIES:
:export_file_name: 7
:END:
#+begin_description
This is about the various usages of Proxy in JavaScript/TypeScript
#+end_description
Todo stub
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy

*** meta :noexport:
| Asset           | Description   |
|-----------------+---------------|
| https://ja.nz/8 | Location      |
| file:static/    | Ref to assets |


* Misc :noexport:
:PROPERTIES:
:ID:       e3328911-73b1-45dd-be05-c3b24009b67d
:export_hugo_custom_front_matter+: :timestamp ((lambda (ts) (let* ((d (date-to-time (if ts ts (format-time-string (org-time-stamp-format t))))) (f (pop d)) (s (pop d))) (* (+ (* f (math-pow 2 16)) s) 1000))) (org-entry-get (point) "CLOSED"))
:END:
Just a bunch of *#+CALL* functions. Call with =C-c C-c=
** Markup Guide :lookup:
*** Link
[[file:static/blog/cat.jpg][Linktext: Jus a cat]]
*** Pic/Img
![[file:static/blog/cat.jpg][Alttext: Jus a cat]]
*** Text formattings
---
This is
one
paragraph!
---
This is

two paragraphs! (One more line break in org)
---
This is \\
one paragraph with an \<br\>
---
I like to *write bold*. And sometimes /italic/ or even _underlined_ and even +strike-through+.
One note: =verbatim= and ~squiqqly code~ is both the same in markdown

*** Lists
- Minus sign
+ Plus sign

*** Enumerated lists
1. My favorite number
2. Second guess

*** Definition list
- What is React :: react is bla bla... See [[https://react.io][more]]

*** Checkboxes
- [X] checked
- [ ] unchecked
*** Table
| thead | n | o |
| tbody | q | r |

or

| thead | n | o |
|-------+---+---|
| tbody | q | r |

*** Blocks
**** generic div
#+begin_foo
div class foo
#+end_foo

**** src (accept attr_html)
#+attr_html: :class my-section :id section-a
#+begin_src javascript
// class="highlight"
const answer = 42;
console.log("this is how we do")
#+end_src

**** quote
#+begin_quote
It shall be light - and it was light mode
#+end_quote

**** example (accept attr_html)
#+begin_example
For example: Let me show to you...
#+end_example

**** HTML Export
#+begin_export html
<div class="html">sometimes inline code is the answer</div>
#+end_export

**** center
#+begin_center
class="org-center"
<style>.org-center { margin-left: auto; margin-right: auto; text-align: center; }</style>
#+end_center

*** Citation
#+begin_quote
To teach how to live without certainty, and yet without being
paralyzed by hesitation, is perhaps the chief thing that philosophy,
in our age, can still do for those who study it.
#+begin_cite
â€” Bertrand Russell, A History of Western Philosophy
#+end_cite
#+end_quote

** New short :util:
#+NAME: short
#+BEGIN_SRC emacs-lisp :var title=(read-string "title: ")
  (setq id (number-to-string (length (org-map-entries t "LEVEL=2" nil))))
  (org-insert-heading)
  (insert (format "%s,%s" id title))
  (org-metaright)
  (org-todo "DRAFT")
  (org-insert-structure-template "description")
  (org-set-property "export_file_name" id)
  (insert "\n")
  (previous-line)
#+END_SRC

** New long :util:
#+NAME: long
#+BEGIN_SRC emacs-lisp :var url=(getenv "BLOG_BASE") :var title=(read-string "title: ")
  (setq id (number-to-string (length (org-map-entries t "LEVEL=2" nil))))
  (org-insert-heading)
  (insert (format "%s,%s" id title))
  (org-metaright)
  (org-todo "TODO")
  (org-insert-structure-template "description")
  (org-set-property "export_file_name" id)
  (insert "\n")
  (next-line)
  (insert "\n")
  ;; Begin meta table
  (org-insert-heading)
  (insert "meta :noexport:")
  (org-metaright)
  (insert "\n")
  (org-table-create "2x2")
  (org-cycle)
  (insert "Asset")
  (org-cycle)
  (insert "Description")
  (org-cycle)
  (insert (format "%s/%s" url id))
  (org-cycle)
  (insert "Location")
  (org-cycle)
  (insert "file:static/blog")
  (org-cycle)
  (insert "Ref to assets")
  (org-cycle)
  (kill-whole-line)
  (previous-line 6)
  ;; End meta table
#+END_SRC

** COMMENT Org Local Variables
# Local Variables:
# org-use-tag-inheritance: nil
# End:
