:META:
#+title: Ja0nz Blog ðŸ“– https://ja.nz
#+author: Ja0nz
#+email: mail@ja.nz
#+language: en
:END:
:ORGCONFIG:
#+startup: fold
#+seq_todo: TODO DRAFT DONE
#+tags: typescript purescript
:END:
:OXHUGOCONFIG:
#+hugo_base_dir: ./src/pages
#+hugo_section: .
#+hugo_front_matter_format: yaml
#+hugo_front_matter_key_replace: description>summary
#+property: header-args :eval never-export
#+startup: logdone
:END:

* Intro :noexport:
This file is written in [[https://orgmode.org/][Org Mode]] markup and may look funny in GitHub. But actually, this file alone is the *blogging engine* for https://ja.nz. It features:
- callable source blocks for templating
- clean up and helper functions
- markdown export with [[https://github.com/kaushalmodi/ox-hugo][Ox-Hugo]]

Org mode is really powerful combined with [[https://orgmode.org/manual/Working-with-Source-Code.html][source block]] snippets. Open this README with emacs and have a look yourself. I may blog about this one day too.

/Sidenote:/ I am not using [[https://gohugo.io/][Hugo]] for blogging anymore. Too convoluted for my taste. So I wrote a GH Issues blogging engine myself ðŸ‘‰[[https://www.npmjs.com/package/gh-cms][GH-CMS]]ðŸ¥³

** Markup Guide
*** Link
[[file:static/cat.jpg][Linktext: Jus a cat]]
*** Pic/Img
![[file:static/cat.jpg][Alttext: Jus a cat]]
*** Text formattings
---
This is
one
paragraph!
---
This is

two paragraphs! (One more line break in org)
---
This is \\
one paragraph with an \<br\>
---
I like to *write bold*. And sometimes /italic/ or even _underlined_ and even +strike-through+.
One note: =verbatim= and ~squiqqly code~ is both the same in markdown

*** Lists
- Minus sign
+ Plus sign

*** Enumerated lists
1. My favorite number
2. Second guess

*** Definition list
- What is React :: react is bla bla... See [[https://react.io][more]]

*** Checkboxes
- [X] checked
- [ ] unchecked
*** Table
| thead | n | o |
| tbody | q | r |

or

| thead | n | o |
|-------+---+---|
| tbody | q | r |

*** Blocks
**** generic div
#+begin_foo
div class foo
#+end_foo

**** src (accept attr_html)
#+attr_html: :class my-section :id section-a
#+begin_src javascript
// class="highlight"
const answer = 42;
console.log("this is how we do")
#+end_src

**** quote
#+begin_quote
It shall be light - and it was light mode
#+end_quote

**** example (accept attr_html)
#+begin_example
For example: Let me show to you...
#+end_example

**** HTML Export
#+begin_export html
<div class="html">sometimes inline code is the answer</div>
#+end_export

**** center
#+begin_center
class="org-center"
<style>.org-center { margin-left: auto; margin-right: auto; text-align: center; }</style>
#+end_center

*** Citation
#+begin_quote
To teach how to live without certainty, and yet without being
paralyzed by hesitation, is perhaps the chief thing that philosophy,
in our age, can still do for those who study it.
#+begin_cite
â€” Bertrand Russell, A History of Western Philosophy
#+end_cite
#+end_quote

* Call Utilities :noexport:
:PROPERTIES:
:ID:       e3328911-73b1-45dd-be05-c3b24009b67d
:END:
Just a bunch of *#+CALL* functions. Call with =C-c C-c=
** New micro
#+NAME: micro
#+BEGIN_SRC emacs-lisp :var title=(read-string "title: ")
  (setq id (number-to-string (length (org-map-entries t "LEVEL=2" nil))))
  (org-insert-heading)
  (insert (format "#%s,%s" id title))
  (org-metaright)
  (org-todo "DRAFT")
  (org-set-property "export_file_name" id)
  (next-line)
  (insert "\n")
#+END_SRC

** New post
#+NAME: post
#+BEGIN_SRC emacs-lisp :var url=(getenv "BLOG_BASE") :var title=(read-string "title: ")
  (setq id (number-to-string (length (org-map-entries t "LEVEL=2" nil))))
  (org-insert-heading)
  (insert (format "#%s,%s" id title))
  (org-metaright)
  (org-todo "TODO")
  (org-insert-structure-template "description")
  (org-set-property "export_file_name" id)
  (next-line)
  (insert "\n")
  ;; Begin meta table
  (org-insert-heading)
  (insert "meta :noexport:")
  (org-metaright)
  (insert "\n")
  (org-table-create "2x2")
  (org-cycle)
  (insert "Asset")
  (org-cycle)
  (insert "Description")
  (org-cycle)
  (insert (format "%s/%s" url id))
  (org-cycle)
  (insert "Location")
  (org-cycle)
  (insert "file:static/")
  (org-cycle)
  (insert "Ref to assets")
  (org-cycle)
  (kill-whole-line)
  (previous-line 6)
  ;; End meta table
#+END_SRC

** Local static files to github links replace :inplace:
#+CALL: expand-link()
#+NAME: expand-link
#+BEGIN_SRC emacs-lisp :var url=(getenv "ASSET_BASE") :results none
  (org-toggle-link-display)
  (replace-regexp "\\[\\[file:static" (concat "[[" url))
  (org-toggle-link-display)
  (pop-global-mark)
#+END_SRC

** Clean content directory :inplace:
#+CALL: clean()
#+NAME: clean
#+begin_src emacs-lisp :var cdir=(getenv "CONTENT_PATH") :results none
  (delete-directory cdir t)
  (make-directory cdir)
#+END_SRC


* Workbench :noexport:
#+CALL: micro()
#+CALL: post()
** TODO #6,Proxies in fantasyland :typescript:
:PROPERTIES:
:export_file_name: 6
:END:
#+begin_description
This is about the various usages of Proxy in JavaScript/TypeScript
#+end_description
Todo stub
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy

*** meta :noexport:
| Asset           | Description   |
|-----------------+---------------|
| https://ja.nz/6 | Location      |
| file:static/    | Ref to assets |

** DRAFT #9,rec
:PROPERTIES:
:export_file_name: 9
:END:

* Micro
:PROPERTIES:
:export_hugo_bundle: micro
:export_hugo_custom_front_matter+: :category (org-entry-get (point) "export_hugo_bundle" t)
:export_hugo_custom_front_matter+: :timestamp ((lambda (ts) (let* ((d (date-to-time (if ts ts (format-time-string (org-time-stamp-format t))))) (f (pop d)) (s (pop d))) (* (+ (* f (math-pow 2 16)) s) 1000))) (org-entry-get (point) "CLOSED"))
:export_hugo_custom_front_matter+: :state (if (org-entry-get (point) "CLOSED") "CLOSED" "OPEN")
:END:
** DONE #5,Proxy :typescript:
CLOSED: [2022-04-26 Di 12:35]
:PROPERTIES:
:export_file_name: 5
:END:
A nonempty string Record. Guarantees to return a string or empty/neutral string
#+begin_src typescript
const safeRecord = new Proxy(
  {}, {
    get: (handler: Record<PropertyKey, string>, name: PropertyKey) : string => {
      handler[name] ??= ""; return handler[name];
    }
  }
);
#+end_src

** DONE #7,Match type array and numbered :typescript:
CLOSED: [2022-04-26 Di 12:33]
:PROPERTIES:
:export_file_name: 7
:END:
Conditional type switch on Array vs Object vs subtyped object
#+begin_src typescript
type DetectArray<T> = number extends keyof T ? true : false;
DetectArray<string[]> // true
DetectArray<{ [k: number]: unknown } // true

type DetectStringObj<T> = string extends keyof T ? true : false;
DetectArray<{ [k: string]: unknown } // true
DetectArray<{ x: string } // false
#+end_src

** DRAFT #8,Recursion
:PROPERTIES:
:export_file_name: 8
:END:
 #+begin_quote
 The idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process.
 #+begin_cite
 â€” SICP JS; https://sourceacademy.org/sicpjs/1.1.3
 #+end_cite
 #+end_quote

* Blog
:PROPERTIES:
:export_hugo_bundle: blog
:export_hugo_custom_front_matter+: :category (org-entry-get (point) "export_hugo_bundle" t)
:export_hugo_custom_front_matter+: :timestamp ((lambda (ts) (let* ((d (date-to-time (if ts ts (format-time-string (org-time-stamp-format t))))) (f (pop d)) (s (pop d))) (* (+ (* f (math-pow 2 16)) s) 1000))) (org-entry-get (point) "CLOSED"))
:export_hugo_custom_front_matter+: :state (if (org-entry-get (point) "CLOSED") "CLOSED" "OPEN")
:END:
** DONE #10,All the formattings :started:
CLOSED: [2022-05-16 Mo 16:40]
:PROPERTIES:
:export_file_name: 10
:END:
#+begin_description
This post will contain a lot of formattings
#+end_description

*** Link
[[https://raw.githubusercontent.com/ja0nz/ja.nz/main/static/cat.jpg][Linktext: Jus a cat]]
*** Pic/Img
![[https://raw.githubusercontent.com/ja0nz/ja.nz/main/static/cat.jpg][Alttext: Jus a cat]]
*** Text formattings
---
This is
one
paragraph!
---
This is

two paragraphs! (One more line break in org)
---
This is \\
one paragraph with an \<br\>
---
I like to *write bold*. And sometimes /italic/ or even _underlined_ and even +strike-through+.
One note: =verbatim= and ~squiqqly code~ is both the same in markdown

*** Lists
- Minus sign
+ Plus sign

*** Enumerated lists
1. My favorite number
2. Second guess

*** Definition list
- What is React :: react is bla bla... See [[https://react.io][more]]

*** Checkboxes
- [X] checked
- [ ] unchecked
*** Table
| thead | n | o |
| tbody | q | r |

or

| thead | n | o |
|-------+---+---|
| tbody | q | r |

*** Blocks
**** generic div
#+begin_foo
div class foo
#+end_foo

**** src (accept attr_html)
#+attr_html: :class my-section :id section-a
#+begin_src javascript
// class="highlight"
const answer = 42;
console.log("this is how we do")
#+end_src

**** quote
#+begin_quote
It shall be light - and it was light mode
#+end_quote

**** example (accept attr_html)
#+begin_example
For example: Let me show to you...
#+end_example

**** HTML Export
#+begin_export html
<div class="html">sometimes inline code is the answer</div>
#+end_export

**** center
#+begin_center
class="org-center"
<style>.org-center { margin-left: auto; margin-right: auto; text-align: center; }</style>
#+end_center

*** Citation
#+begin_quote
To teach how to live without certainty, and yet without being
paralyzed by hesitation, is perhaps the chief thing that philosophy,
in our age, can still do for those who study it.
#+begin_cite
â€” Bertrand Russell, A History of Western Philosophy
#+end_cite
#+end_quote

*** meta :noexport:
| Asset            | Description   |
|------------------+---------------|
| https://ja.nz/10 | Location      |
| file:static/     | Ref to assets |
